<?xml version="1.0" encoding="UTF-8" ?>
<ruleset
    name="quickstart"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd"
>
   <description
    >Quickstart configuration of PMD for Salesforce.com Apex. Includes the rules that are most likely to apply everywhere.</description>

    <!-- COMPLEXITY -->
    <!--
      PMD generates lots of warnings about complexity which really don't help our codebase.
      I've decided to remove the complexity rules completely, rather than add NOPMD comments
      or @SuppressWarnings annotations due to the low value this presents in this project.
    -->
    <!--
    <rule
        ref="category/apex/design.xml/ExcessiveClassLength"
        message="Avoid really long classes (lines of code)"
    >
       <priority>4</priority>
       <properties>
            <property name="minimum" value="2200" />
       </properties>
    </rule>
    <rule
        ref="category/apex/design.xml/ExcessiveParameterList"
        message="Avoid long parameter lists. Consider passing a custom class instead."
    >
      <priority>4</priority>
      <properties>
         <property name="minimum" value="5" />
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/ExcessivePublicCount">
      <priority>4</priority>
      <properties>
         <property name="minimum" value="30" />
      </properties>
   </rule>
   <rule
        ref="category/apex/design.xml/NcssConstructorCount"
        message="The constructor has an NCSS line count of {0}"
    >
      <priority>4</priority>
      <properties>
         <property name="minimum" value="25" />
      </properties>
   </rule>
   <rule
        ref="category/apex/design.xml/NcssMethodCount"
        message="The method {0}() has an NCSS line count of {1}"
    >
      <priority>4</priority>
      <properties>
         <property name="minimum" value="50" />
      </properties>
   </rule>
   <rule
        ref="category/apex/design.xml/NcssTypeCount"
        message="The type has an NCSS line count of {0}"
    >
      <priority>4</priority>
      <properties>
         <property name="minimum" value="700" />
      </properties>
   </rule>
   <rule
        ref="category/apex/design.xml/StdCyclomaticComplexity"
        message="The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}."
    >
      <priority>4</priority>
      <properties>
         <property name="reportLevel" value="20" />
      </properties>
   </rule>
   <rule ref="category/apex/design.xml/CognitiveComplexity">
      <priority>4</priority>
      <properties>
         <property name="classReportLevel" value="100" />
         <property name="methodReportLevel" value="50" />
     </properties>
   </rule>
   <rule ref="category/apex/design.xml/CyclomaticComplexity">
      <priority>4</priority>
      <properties>
         <property name="classReportLevel" value="100" />
         <property name="methodReportLevel" value="50" />
     </properties>
   </rule>
   <rule ref="category/apex/design.xml/TooManyFields" message="Too many fields">
      <priority>4</priority>
      <properties>
         <property name="maxfields" value="20" />
      </properties>
   </rule>
   -->
   <rule
        ref="category/apex/design.xml/AvoidDeeplyNestedIfStmts"
        message="Deeply nested if..else statements are hard to read"
    >
      <priority>4</priority>
      <properties>
         <property name="problemDepth" value="7" />
      </properties>
   </rule>

   <!-- PERFORMANCE -->
   <rule
        ref="category/apex/performance.xml/OperationWithLimitsInLoop"
        message="Avoid operations in loops that may hit governor limits"
    >
      <priority>1</priority>
   </rule>
   <rule
        ref="category/apex/errorprone.xml/AvoidDirectAccessTriggerMap"
        message="Avoid directly accessing Trigger.old and Trigger.new"
    >
      <priority>1</priority>
   </rule>
   <rule
        ref="category/apex/bestpractices.xml/AvoidLogicInTrigger"
        message="Avoid logic in triggers"
    >
      <priority>1</priority>
   </rule>
   <rule
        ref="category/apex/bestpractices.xml/AvoidGlobalModifier"
        message="Avoid using global modifier"
    >
      <priority>2</priority>
   </rule>
   <rule ref="category/apex/errorprone.xml/AvoidNonExistentAnnotations">
      <priority>3</priority>
   </rule>
   <rule
        ref="category/apex/errorprone.xml/AvoidHardcodingId"
        message="Avoid hardcoding ID's"
    >
      <priority>1</priority>
   </rule>

   <!-- NAMING -->
   <rule
        ref="category/apex/codestyle.xml/ClassNamingConventions"
        message="Class names should begin with an uppercase character"
    >
      <priority>3</priority>
   </rule>
   <rule ref="category/apex/codestyle.xml/MethodNamingConventions">
      <priority>4</priority>
      <properties>
         <property name="testPattern" value="[a-z][a-zA-Z0-9_]*" />
         <property name="staticPattern" value="[a-z][a-zA-Z0-9]*" />
         <property name="instancePattern" value="[a-z][a-zA-Z0-9]*" />
      </properties>
   </rule>
   <rule
        ref="category/apex/errorprone.xml/MethodWithSameNameAsEnclosingClass"
        message="Classes should not have non-constructor methods with the same name as the class"
    >
      <priority>2</priority>
   </rule>

   <!-- NAMING -->
   <rule ref="category/apex/codestyle.xml/FieldNamingConventions">
      <priority>4</priority>
      <properties>
         <property name="finalPattern" value="[A-Z][A-Z_]*" />
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/FormalParameterNamingConventions">
      <priority>3</priority>
   </rule>
   <rule ref="category/apex/codestyle.xml/PropertyNamingConventions">
      <priority>3</priority>
      <properties>
          <property name="instancePattern" value="[a-z][a-zA-Z0-9_]*" />
      </properties>
   </rule>
   <rule ref="category/apex/codestyle.xml/LocalVariableNamingConventions">
      <priority>3</priority>
      <properties>
          <property name="finalLocalPattern" value="[A-Z][A-Z_]*" />
      </properties>
   </rule>

   <!-- TESTS -->
   <rule
        ref="category/apex/bestpractices.xml/ApexUnitTestShouldNotUseSeeAllDataTrue"
        message="@isTest(seeAllData=true) should not be used in Apex unit tests because it opens up the existing database data for unexpected modification by tests"
    >
      <priority>2</priority>
   </rule>
   <rule
        ref="category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveAsserts"
        message="Apex unit test classes should have at least one System.assert() or assertEquals() or AssertNotEquals() call"
    >
      <priority>2</priority>
   </rule>
   <rule
        ref="category/apex/bestpractices.xml/ApexUnitTestMethodShouldHaveIsTestAnnotation"
    >
      <priority>1</priority>
   </rule>
   <rule
        ref="category/apex/bestpractices.xml/ApexAssertionsShouldIncludeMessage"
    >
      <priority>2</priority>
   </rule>
   <rule ref="category/apex/errorprone.xml/TestMethodsMustBeInTestClasses">
      <priority>1</priority>
   </rule>

   <!-- SECURITY -->
   <rule
        ref="category/apex/security.xml/ApexSharingViolations"
        message="Apex classes should declare a sharing model if DML or SOQL is used"
    >
      <priority>2</priority>
   </rule>
   <rule
        ref="category/apex/security.xml/ApexInsecureEndpoint"
        message="Apex callouts should use encrypted communication channels"
    >
      <priority>1</priority>
   </rule>
   <rule ref="category/apex/errorprone.xml/ApexCSRF">
      <priority>3</priority>
   </rule>
   <rule
        ref="category/apex/security.xml/ApexOpenRedirect"
        message="Apex classes should safely redirect to a known location"
    >
      <priority>2</priority>
   </rule>
   <rule
        ref="category/apex/security.xml/ApexSOQLInjection"
        message="Apex classes should escape variables merged in DML query"
    >
      <priority>2</priority>
   </rule>
   <rule
        ref="category/apex/security.xml/ApexXSSFromURLParam"
        message="Apex classes should escape Strings obtained from URL parameters"
    >
      <priority>2</priority>
   </rule>
   <rule
        ref="category/apex/security.xml/ApexXSSFromEscapeFalse"
        message="Apex classes should escape addError strings"
    >
      <priority>2</priority>
   </rule>
   <rule
        ref="category/apex/security.xml/ApexBadCrypto"
        message="Apex Crypto should use random IV/key"
    >
      <priority>1</priority>
   </rule>
   <!-- <rule
        ref="category/apex/security.xml/ApexCRUDViolation"
        message="Validate CRUD permission before SOQL/DML operation"
    >
      <priority>5</priority>
   </rule> -->
   <rule
        ref="category/apex/security.xml/ApexDangerousMethods"
        message="Calling potentially dangerous method"
    >
      <priority>2</priority>
   </rule>
   <rule
        ref="category/apex/security.xml/ApexSuggestUsingNamedCred"
        message="Consider using named credentials for authenticated callouts"
    >
      <priority>2</priority>
   </rule>

   <!-- BRACES -->
   <rule
        ref="category/apex/codestyle.xml/IfStmtsMustUseBraces"
        message="Avoid using if statements without curly braces"
    >
      <priority>3</priority>
   </rule>
   <rule
        ref="category/apex/codestyle.xml/IfElseStmtsMustUseBraces"
        message="Avoid using 'if...else' statements without curly braces"
    >
      <priority>3</priority>
   </rule>
   <rule
        ref="category/apex/codestyle.xml/ForLoopsMustUseBraces"
        message="Avoid using 'for' statements without curly braces"
    >
      <priority>3</priority>
   </rule>
   <rule
        ref="category/apex/codestyle.xml/WhileLoopsMustUseBraces"
        message="Avoid using 'while' statements without curly braces"
    >
      <priority>3</priority>
   </rule>

   <!-- EMPTY -->
   <rule
        ref="category/apex/errorprone.xml/EmptyCatchBlock"
        message="Avoid empty catch blocks"
    >
      <priority>3</priority>
   </rule>
   <rule
        ref="category/apex/errorprone.xml/EmptyIfStmt"
        message="Avoid empty 'if' statements"
    >
      <priority>3</priority>
   </rule>
   <rule
        ref="category/apex/errorprone.xml/EmptyWhileStmt"
        message="Avoid empty 'while' statements"
    >
      <priority>3</priority>
   </rule>
   <rule
        ref="category/apex/errorprone.xml/EmptyTryOrFinallyBlock"
        message="Avoid empty try or finally blocks"
    >
      <priority>3</priority>
   </rule>
   <rule
        ref="category/apex/errorprone.xml/EmptyStatementBlock"
        message="Avoid empty block statements."
    >
      <priority>3</priority>
   </rule>

   <!-- STYLE -->
   <rule ref="category/apex/codestyle.xml/OneDeclarationPerLine">
      <priority>3</priority>
   </rule>
   <!-- This produces a false positive:
      public string varOne { get; set; }
      private string varTwo;
   -->
   <!-- <rule ref="category/apex/codestyle.xml/FieldDeclarationsShouldBeAtStart">
      <priority>4</priority>
   </rule> -->

   <!-- DOCUMENTATION -->
   <!-- Butn isn't using ApexDoc
   <rule ref="category/apex/documentation.xml/ApexDoc" message="Document classes, methods, and properties that are public or global.">
      <priority>3</priority>
   </rule>
   -->

   <!-- CLARITY / BEST PRACTICES -->
   <rule ref="category/apex/bestpractices.xml/DebugsShouldUseLoggingLevel">
      <priority>3</priority>
   </rule>
   <rule ref="category/apex/bestpractices.xml/UnusedLocalVariable">
      <priority>3</priority>
   </rule>
   <rule ref="category/apex/errorprone.xml/OverrideBothEqualsAndHashcode">
      <priority>3</priority>
   </rule>

</ruleset>
